% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cdr_manage_db_tbls.R
\name{cdr_manage_db_tbls}
\alias{cdr_manage_db_tbls}
\title{Server module to present and control a db table}
\usage{
cdr_manage_db_tbls(
  table_name,
  key_col,
  db_conn_pool,
  session,
  add_row_permission = F,
  del_row_permission = F,
  cell_edit_permission = F,
  lock_fields = c()
)
}
\arguments{
\item{table_name}{primary table name - namespace ID corresponding to the
'primary_tbl_name' in the database}

\item{key_col}{name of the unique ID column in the db table (table must have
a unique ID column with unique IDs)}

\item{db_conn_pool}{db connection from package 'pool'}

\item{session}{current shiny session}

\item{add_row_permission}{T or F: allows user to add a row to the primary table from the module}

\item{del_row_permission}{T or F: allows user to delete a row on the primary table from the module}

\item{cell_edit_permission}{T or F: to make editable the primary table from the module
(cell_edit_permission = T means the user can change the data)
(cell_edit_permission = F means the user can only see the data)}

\item{lock_fields}{strings: a vector of field names from the database to lock from editing}
}
\value{
returns DT reactive tables to the shiny ui environment
}
\description{
This function is a server module that gets database tables from db specified by pool connection
and the db table name specified in 'table_name', server module manages and syncs
changes between the UI DT, in-server-memory tbl, and backend db, for the
primary as well as the corresponding deltas table (and joined table if it's
presented in the UI)
}
\examples{
\dontrun{
data("iris")
con <- pool::dbPool(DBI::dbConnect(RSQLite::SQLite(), 'iris.db'))
iris <- dplyr::mutate(iris,
           unique_id = paste0('uid_',stringr::str_pad(dplyr::row_number(),3,pad=0)))
crudr::cdr_create_tbls_in_db(db_conn_pool = con, db_tbl = iris)
server <- function(input, output, session){
             iris_r_tbl <- crudr::cdr_manage_db_tbls('iris', 'unique_id', con, session)
             output$iris <- DT::renderDT(iris_r_tbl())
}
ui <- fluidPage(DTOutput('iris'))
shinyApp(ui,server)
}
}
